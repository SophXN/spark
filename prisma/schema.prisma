// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    firstName String?
    lastName  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([firstName])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    firstName     String?
    lastName      String?
    email         String?   @unique
    emailVerified DateTime?
    companyId     String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ServiceType {
    FOOD
    MUSIC
    ART
    DESIGN
    SPACE
    OTHER
}

enum EventType {
    POPUP
    CONFERENCE
    CONCERT
    DINNER
    GALA
    FAIR
    COMPETITION
    CHARITY
    NETWORKING
    CELEBRATION
    OTHER
}

enum Tier {
    ONE
    TWO
    THREE
}

model Company {
    id                    String                 @id @default(cuid())
    name                  String
    industry              String
    eventRequests         EventRequest[]
    sponsorships          Sponsor[]
    collaboratorResponses CollaboratorResponse[]
}

model EventRequest {
    id            String         @id @default(cuid())
    eventId       String
    requester     Company        @relation(fields: [requesterId], references: [id])
    requesterId   String // foreign key to the company
    title         String
    description   String
    eventDate     DateTime
    eventLocation String
    createdOn     DateTime
    eventType     EventType
    sponsors      Sponsor[]
    collaborators Collaborator[]
}

model Sponsor {
    id               String       @id @default(cuid())
    eventRequest     EventRequest @relation(fields: [eventRequestId], references: [id])
    eventRequestId   String
    tier             Tier
    description      String
    sponsorsRequired Int
    amountPerSponsor Float
    responders       Company[]
}

model Collaborator {
    id                    String                 @id @default(cuid())
    eventRequest          EventRequest           @relation(fields: [eventRequestId], references: [id])
    eventRequestId        String
    serviceType           ServiceType
    description           String
    collaboratorsRequired Int
    responses             CollaboratorResponse[]
}

model CollaboratorResponse {
    id              String       @id @default(cuid())
    collaborator    Collaborator @relation(fields: [collaboratorId], references: [id])
    collaboratorId  String
    responder       Company      @relation(fields: [responderId], references: [id])
    responderId     String
    isAccepted      Boolean
    responseMessage String?
    respondedOn     DateTime
}
